" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
   " the call to :runtime you can find below.  If you wish to change any of those
   " settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
   " will be overwritten everytime an upgrade of the vim packages is performed.
   " It is recommended to make changes after sourcing debian.vim since it alters
   " the value of the 'compatible' option.

   " This line should not be removed as it ensures that various options are
   " properly set to work with the Vim-related packages available in Debian.
   runtime! debian.vim

   " Uncomment the next line to make Vim more Vi-compatible
   " NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
   " options, so any other options should be set AFTER setting 'compatible'.
   "set compatible

   " Vim5 and later versions support syntax highlighting. Uncommenting the next
   " line enables syntax highlighting by default.
   if has("syntax")
     syntax on
   endif

   " If using a dark background within the editing area and syntax highlighting
   " turn on this option as well
   "set background=dark

   " Uncomment the following to have Vim jump to the last position when
   " reopening a file
   "if has("autocmd")
   "  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
   "endif

   " Uncomment the following to have Vim load indentation rules and plugins
   " according to the detected filetype.
   "if has("autocmd")
   "  filetype plugin indent on
   "endif

   " The following are commented out as they cause vim to behave a lot
   " differently from regular Vi. They are highly recommended though.
   set showcmd             " Show (partial) command in status line.
   set showmatch           " Show matching brackets.
   "set ignorecase     " Do case insensitive matching
   "set smartcase      " Do smart case matching
   "set incsearch      " Incremental search
   set autowrite       " Automatically save before commands like :next and :make
   set hidden      " Hide buffers when they are abandoned
   set mouse=a     " Enable mouse usage (all modes) 启用鼠标方便翻页，移动光标

   " Source a global configuration file if available
   if filereadable("/etc/vim/vimrc.local")
     source /etc/vim/vimrc.local
   endif

   set nu           "show line number
   set nobackup        "no backup
   ""set cursorline       "high this line
   set ruler            "show cursor site in right below
   autocmd InsertLeave * se nocul  " 用浅色高亮当前行
   set tabstop=4      " 统一缩进为4
   set shiftwidth=4

   set pastetoggle=<F6> "插入模式粘贴不会自动缩进避免混乱
   "set autoindent    "自动缩进
   "set cindent

   ""set foldenable " 开始折叠
   ""set foldmethod=syntax " 设置语法折叠
   ""set foldcolumn=0 " 设置折叠区域的宽度
   ""setlocal foldlevel=1 " 设置折叠层数
   ""set foldopen=all     "光标到达折叠快时，自动打开
   ""set foldclose=all    " 离开代码块后，自动折叠

   " 用空格键来开关折叠
   nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

   set autoread  " 设置当文件被改动时自动载入

   set completeopt=longest,menu
   set completeopt=preview,menu "代码补全
   set nocompatible "取消vi 兼容模式

   "自动补全
   :inoremap ( ()<ESC>i
   :inoremap ) <c-r>=ClosePair(')')<CR>
   :inoremap { {<CR>}<ESC>O
   :inoremap } <c-r>=ClosePair('}')<CR>
   :inoremap [ []<ESC>i
   :inoremap ] <c-r>=ClosePair(']')<CR>
   :inoremap " ""<ESC>i
   :inoremap ' ''<ESC>i
   function! ClosePair(char)
       if getline('.')[col('.') - 1] == a:char
          return "\<Right>"
       else
          return a:char
       endif
   endfunction


   """"""""""""""""""""""""""""""""""""""""""""""""""""
   "打开文件类型检测, 加了这句才可以用智能补全
   filetype plugin indent on

   autocmd FileType c,cpp map <buffer> <leader><space> :w<cr>:make<cr>

   """"""""""""""" definition  SetTitle() """"""""""""""""""""""""""""""""""

   autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java  exec ":call SetTitle()"

   func SetTitle()
    if &filetype == 'sh'
       call setline(1,"\#########################################################################")
       call append(line("."), "\# File Name: ".expand("%"))
       call append(line(".")+1, "\# Author: ims")
       call append(line(".")+2, "\# Created Time: ".strftime("%c"))
       call append(line(".")+3, "\#########################################################################")
       call append(line(".")+4, "\#!/bin/bash")
       call append(line(".")+5, "")
    else
        call setline(1, "/*************************************************************************")
        call append(line("."), "    > File Name: ".expand("%"))
        call append(line(".")+1, "    > Author: ims")
        call append(line(".")+2, "    > Created Time: ".strftime("%c"))
        call append(line(".")+3, " ************************************************************************/")
        call append(line(".")+4, "")
    endif

    if &filetype == 'cpp'
       call append(line(".")+5, "#include<iostream>")
       call append(line(".")+6, "using namespace std;")
       call append(line(".")+7, "")
       call append(line(".")+8, "int main()")
       call append(line(".")+9, "{")
       call append(line(".")+10, "\t")
       call append(line(".")+11, "\treturn 0;")
       call append(line(".")+12, "}")
    endif

    if &filetype == 'c'
        call append(line(".")+5, "#include<stdio.h>")
        call append(line(".")+6, "")
    endif

    normal 12G"
   endfunc

   """"""""" end SetTitle()  """""""""""""""""""""""""""""""""""""""""""""""""""
   autocmd BufNewFile *.py  exec ":call Set_py_Title()"
   func Set_py_Title()
       call setline(1,"\#! /usr/bin/python3.5")
       call append(line("."), "\# -*- coding: UTF-8 -*-")
       call append(line(".")+1, "\####################################################################")
       call append(line(".")+2, "\# File Name: ".expand("%"))
       call append(line(".")+3, "\# Author: ims")
       call append(line(".")+4, "\# Created Time: ".strftime("%c"))
       call append(line(".")+5, "\####################################################################")
       call append(line(".")+6, "")
       call append(line(".")+7, "")
       normal 9G
   endfunc

   "<CR>:Carriage Return"
   map <F4> :call Exec_py()<CR>
   func! Exec_py()
       exec "w"
       exec "!chmod +x %"
       :!./%
   endfunc


   """""""""""""""""""Set_py_Title() """"""""""""""""''''""""""""""""""""""


"C，C++ 按F5编译运行" "<"是换行符号，之前不能有空格，
"复制后<CR>  后面会有2个空格，要删除，不然，运行后直接回到编辑界面
 map <F5> :call CompileRunGcc()<CR>
      func! CompileRunGcc()
      exec "w"
       if &filetype == 'c'
       exec "!gcc % -o %<"
       exec "! ./%<"
        elseif &filetype == 'cpp'
       exec "!g++ % -o %<"
       exec "! ./%<"
       elseif &filetype == 'java'
       exec "!javac %"
       exec "!java %<"
       elseif &filetype == 'sh'
       exec "!chmod +x %"
       :!./%
       endif
   endfunc

   """""""""""""""调试C,C++"""""""""""""""""""""""""""""""

   map <F8> :call Rungdb()<CR>
   func! Rungdb()
       exec "w"
       exec "!g++ % -g -Wall -o %<"
       exec "!gdb ./%<"
   endfunc
